environment: development
container:
  name: metaphactory
  port: 8080
  image: metaphacts/metaphactory
  tag: 5.2.0
  imagePullSecretName: regcred
  credentialsSecretName: credentials
  persistentVolumeSize: 1Gi
  resources:
    cpuRequest: "200m"
    memoryRequest: "1Gi"
    cpuLimit: "500m"
    memoryLimit: "2Gi"
config:
  localDefaultUsers: |
    [users]
    admin=$shiro1$SHA-256$500000$JWFyxDbrkcdlGl6Xpj02dg==$UYbUG3bHmT8Z4dTeEHToK5WdyvwR9cRefiM/9zRjfr4=,admin,root
    anonymous=$shiro1$SHA-256$500000$LRgzF+Iayekl6VfDVkÃ¥VWIA==$/s38LlLsNeaGzsD0Z3VTvfurv68HpReieOaNlrcKaPI=,end-user,tableau-anonymous
  ssoOidcParams: |
    [main]
    discoveryURI.value = https://login.microsoftonline.com/customer-tenant-id/v2.0/.well-known/openid-configuration
    callbackUrl.value = https://metaphacts.example.com/sso/callback?client_name=OidcClient
    clientId.value = 12345678-1234-abcd-1234-1234abcd5678
    clientSecret.value = ABcdEFghIJklMN12Op34QRs5TUVwXYZaBcDeFgH6IJK7LmNoPq
    scope.value = openid email profile offline_access
    principalNameAttribute.value = preferred_username
    defaultRole.value = guest
    rolesClaimAttribute.value = roles
    scopeRolesMap.value = "admin":"admin,root,repository-admin","reader":"guest","writer":"admin"
  ssoUsers: |
    [users]
    #myuser@example.com = admin,root,repository-admin
  environmentProp: |
    shiroAuthenticationFilter=authcBasic,oidc
    enableLocalUsers=true
  # Add custom roles if required (helpful for SSO) - the key of the key-value pair will be the name of the role
  #customRoles:
  #  customUserRole: |
  #    description=Custom user role
  #    includes=system-base, monitoring
  #    permissions = \
  #        ontologies:*:*, \
  #        sparql:graphstore:get, \
  #        assets:view:ontology, \
  #        assets:api:list-services, \
  #        proxy:graphscope, \
  #        vocabularies:catalog:view, \
  #        vocabularies:*:vocabulary:view, \
  #        assets:view:vocabulary
  #  secondUserRole: |
  #    description=Another Custom user role
  #    includes=system-base, monitoring

  env:
    PLATFORM_OPTS: >-
      -Dlog4j.configurationFile=file:///var/lib/jetty/webapps/etc/log4j2.xml
      -Dconfig.environment.securityConfigStorageId=config-app
  storage_prop: ""
service:
  portName: http
  port: 80
  targetPort: 8080
  type: LoadBalancer # or ClusterIP or NodePort
replicas: 1
database:
  defaultDatabaseName: metaphactory
  assetsDatabaseName: assets
  testsDatabaseName: tests
  repositoryType: "metaphactory:GraphDBRepository"
  address: http://graphdb-node.default.svc.cluster.local:7200 # http://<service>.<namespace>:7200
storage:
  customAwsClass: false  # creates a custom StorageClass for AWS
  #className: "" # set the storage class, e.g. 'default' for the default storage class or 'hostpath' for Docker Desktop
  reclaimPolicy: Retain
ingress:
  enabled: false
  groupName: lb-group-name
  name: metaphactory-ingress-tls
  certificateArn: certificate-arn
  ingressClass: alb
  host: test.example.com
  enableSSLRedirect: true
